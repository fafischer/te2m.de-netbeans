/*
* VertxPanelVisual.java
*   
* Copyright 2009 - 2015 Frank Fischer (email: frank@te2m.de)
*
* This file is part of the de.te2m.tools.netbeans.vertx project which is a sub project of the te2m.de Netbeans modules 
* (https://github.com/fafischer/te2m.de-netbeans).
* 
*/
package de.te2m.tools.netbeans.vertx.wizards.project;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.Document;
import org.netbeans.spi.project.ui.support.ProjectChooser;
import org.openide.WizardDescriptor;
import org.openide.WizardValidationException;
import org.openide.filesystems.FileUtil;

/**
 * The Class VertxPanelVisual.
 *
 * @author ffischer
 * @version 1.0
 * @since 1.0
 */
public class VertxPackagingPanelVisual extends JPanel implements DocumentListener {

    /**
     * The Constant PROP_PROJECT_NAME.
     */
    public static final String PROP_PROJECT_NAME = "projectName";

    /**
     * The panel.
     */
    private VertxWizardPackagingPanel panel;

    /**
     * Instantiates a new vertx panel visual.
     *
     * @param panel the panel
     */
    public VertxPackagingPanelVisual(VertxWizardPackagingPanel panel) {
        initComponents();
        this.panel = panel;
        // Register listener on the textFields to make the automatic updates
        //projectNameTextField.getDocument().addDocumentListener(this);
        //projectLocationTextField.getDocument().addDocumentListener(this);
    }



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBox1 = new javax.swing.JCheckBox();

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox1, org.openide.util.NbBundle.getMessage(VertxPackagingPanelVisual.class, "VertxPackagingPanelVisual.jCheckBox1.text")); // NOI18N
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jCheckBox1)
                .addContainerGap(527, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jCheckBox1)
                .addContainerGap(252, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBox1;
    // End of variables declaration//GEN-END:variables

    /* (non-Javadoc)
     * @see javax.swing.JComponent#addNotify()
     */
    @Override
    public void addNotify() {
        super.addNotify();
        //same problem as in 31086, initial focus on Cancel button
        //projectNameTextField.requestFocus();
    }

    /**
     * Valid.
     *
     * @param wizardDescriptor the wizard descriptor
     * @return true, if successful
     */
    boolean valid(WizardDescriptor wizardDescriptor) {

        wizardDescriptor.putProperty("WizardPanel_errorMessage", "");
        return true;
    }

    /**
     * Store.
     *
     * @param d the d
     */
    void store(WizardDescriptor d) {
    }

    /**
     * Read.
     *
     * @param settings the settings
     */
    void read(WizardDescriptor settings) {
    }

    /**
     * Validate.
     *
     * @param d the d
     * @throws WizardValidationException the wizard validation exception
     */
    void validate(WizardDescriptor d) throws WizardValidationException {
        // nothing to validate
    }

    // Implementation of DocumentListener --------------------------------------
    /* (non-Javadoc)
     * @see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)
     */
    public void changedUpdate(DocumentEvent e) {
        updateTexts(e);

    }

    /* (non-Javadoc)
     * @see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)
     */
    public void insertUpdate(DocumentEvent e) {
        updateTexts(e);
    }

    /* (non-Javadoc)
     * @see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)
     */
    public void removeUpdate(DocumentEvent e) {
        updateTexts(e);
    }

    /**
     * Handles changes in the Project name and project directory,.
     *
     * @param e the e
     */
    private void updateTexts(DocumentEvent e) {

        Document doc = e.getDocument();

        panel.fireChangeEvent(); // Notify that the panel changed
    }

}
