/*
* VertxPackagingPanelVisual.java
*   
* Copyright 2009 - 2016 Frank Fischer (email: frank@te2m.de)
*
* This file is part of the de.te2m.tools.netbeans.vertx project which is a sub project of the te2m.de Netbeans modules 
* (https://github.com/fafischer/te2m.de-netbeans).
* 
 */
package de.te2m.tools.netbeans.vertx.wizards.project;

import de.te2m.tools.netbeans.vertx.Validator;
import de.te2m.tools.netbeans.vertx.options.VertxPanel;
import de.te2m.tools.netbeans.vertx.wizards.TemplateKeys;
import javax.swing.JPanel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.WizardDescriptor;
import org.openide.WizardValidationException;
import static org.openide.util.NbPreferences.forModule;

/**
 * The Class VertxPanelVisual. Wizard panel for managing vertx deployment
 * related options.
 *
 * @author ffischer
 * @version 1.0
 * @since 1.0
 */
public class VertxPackagingPanelVisual extends JPanel implements DocumentListener, ChangeListener {

    /**
     * The Constant PROP_PROJECT_NAME.
     */
    public static final String PROP_PROJECT_NAME = "projectName";

    /**
     * The panel.
     */
    private final VertxWizardPackagingPanel panel;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    /**
     * The create docker check box.
     */
    private javax.swing.JCheckBox createDockerCheckBox;
    
    /**
     * The create docker image label.
     */
    private javax.swing.JLabel createDockerImageLabel;
    
    /**
     * The create fat jar check box.
     */
    private javax.swing.JCheckBox createFatJarCheckBox;
    
    /**
     * The create fat jar label.
     */
    private javax.swing.JLabel createFatJarLabel;
    
    /**
     * The docker image name label.
     */
    private javax.swing.JLabel dockerImageNameLabel;
    
    /**
     * The docker image name text field.
     */
    private javax.swing.JTextField dockerImageNameTextField;
    // End of variables declaration//GEN-END:variables

    /**
     * Instantiates a new vertx panel visual.
     *
     * @param panel the panel
     */
    public VertxPackagingPanelVisual(VertxWizardPackagingPanel panel) {
        initComponents();
        this.panel = panel;
        // Register listener on the textFields to make the automatic updates
        dockerImageNameTextField.getDocument().addDocumentListener(this);
        createFatJarCheckBox.addChangeListener(this);
        createDockerCheckBox.addChangeListener(this);
    }

    /* (non-Javadoc)
     * @see javax.swing.JComponent#addNotify()
     */
    @Override
    public void addNotify() {
        super.addNotify();
        //same problem as in 31086, initial focus on Cancel button
        //projectNameTextField.requestFocus();
    }

    // Implementation of DocumentListener --------------------------------------
    /* (non-Javadoc)
     * @see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)
     */
    @Override
    public void changedUpdate(DocumentEvent e) {
        panel.fireChangeEvent();        
        //updateTexts(e);

    }

    /**
     * Action listener when createFatJar checkbox is toggled;.
     *
     * @param evt the evt
     */
    private void createFatJarCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createFatJarCheckBoxActionPerformed

        // enable docker creation if FatJar is selected
        Boolean value = createFatJarCheckBox.isSelected();
        createDockerCheckBox.setVisible(value);
        createDockerImageLabel.setVisible(value);
        dockerImageNameTextField.setVisible(value && createDockerCheckBox.isSelected());
        dockerImageNameLabel.setVisible(value && createDockerCheckBox.isSelected());
    }//GEN-LAST:event_createFatJarCheckBoxActionPerformed

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        createFatJarCheckBox = new javax.swing.JCheckBox();
        createDockerCheckBox = new javax.swing.JCheckBox();
        createFatJarLabel = new javax.swing.JLabel();
        createDockerImageLabel = new javax.swing.JLabel();
        dockerImageNameLabel = new javax.swing.JLabel();
        dockerImageNameTextField = new javax.swing.JTextField();

        org.openide.awt.Mnemonics.setLocalizedText(createFatJarCheckBox, org.openide.util.NbBundle.getMessage(VertxPackagingPanelVisual.class, "VertxPackagingPanelVisual.createFatJarCheckBox.text")); // NOI18N
        createFatJarCheckBox.setToolTipText(org.openide.util.NbBundle.getMessage(VertxPackagingPanelVisual.class, "VertxPackagingPanelVisual.createFatJarCheckBox.toolTipText")); // NOI18N
        createFatJarCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createFatJarCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(createDockerCheckBox, org.openide.util.NbBundle.getMessage(VertxPackagingPanelVisual.class, "VertxPackagingPanelVisual.createDockerCheckBox.text_1")); // NOI18N
        createDockerCheckBox.setToolTipText(org.openide.util.NbBundle.getMessage(VertxPackagingPanelVisual.class, "VertxPackagingPanelVisual.createDockerCheckBox.toolTipText")); // NOI18N
        createDockerCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createDockerCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(createFatJarLabel, org.openide.util.NbBundle.getMessage(VertxPackagingPanelVisual.class, "VertxPackagingPanelVisual.createFatJarLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(createDockerImageLabel, org.openide.util.NbBundle.getMessage(VertxPackagingPanelVisual.class, "VertxPackagingPanelVisual.createDockerImageLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(dockerImageNameLabel, org.openide.util.NbBundle.getMessage(VertxPackagingPanelVisual.class, "VertxPackagingPanelVisual.dockerImageNameLabel.text")); // NOI18N

        dockerImageNameTextField.setText(org.openide.util.NbBundle.getMessage(VertxPackagingPanelVisual.class, "VertxPackagingPanelVisual.dockerImageNameTextField.text")); // NOI18N
        dockerImageNameTextField.setToolTipText(org.openide.util.NbBundle.getMessage(VertxPackagingPanelVisual.class, "VertxPackagingPanelVisual.dockerImageNameTextField.toolTipText")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(createFatJarLabel)
                    .addComponent(createDockerImageLabel)
                    .addComponent(dockerImageNameLabel))
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(createDockerCheckBox)
                    .addComponent(createFatJarCheckBox)
                    .addComponent(dockerImageNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 469, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createFatJarCheckBox)
                    .addComponent(createFatJarLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(createDockerCheckBox)
                    .addComponent(createDockerImageLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dockerImageNameLabel)
                    .addComponent(dockerImageNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(178, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Creates the docker check box action performed.
     *
     * @param evt the evt
     */
    private void createDockerCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createDockerCheckBoxActionPerformed
        dockerImageNameLabel.setVisible(createDockerCheckBox.isVisible() && createDockerCheckBox.isSelected());
        dockerImageNameTextField.setVisible(createDockerCheckBox.isVisible() && createDockerCheckBox.isSelected());
    }//GEN-LAST:event_createDockerCheckBoxActionPerformed

    /* (non-Javadoc)
     * @see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)
     */
    @Override
    public void insertUpdate(DocumentEvent e) {
        panel.fireChangeEvent();
        //updateTexts(e);
    }

    /**
     * Read the current settings and initialize the values.
     *
     * @param settings the settings
     */
    void read(WizardDescriptor settings) {
        Boolean value = (Boolean) settings.getProperty(TemplateKeys.PKG_CREATE_FAT_JAR);
        if (value == null) {
            value = forModule(VertxPanel.class).getBoolean(TemplateKeys.VERTX_USE_FAT_JAR_DEFAULT, false);
        }

        createFatJarCheckBox.setSelected(value);
        // docker will be only enabled if an FatJar is created
        //createDockerCheckBox.setEnabled(value);
        createDockerCheckBox.setVisible(value);

        Boolean dockervalue = (Boolean) settings.getProperty(TemplateKeys.PKG_CREATE_DOCKER);
        if (null == dockervalue) {
            dockervalue = Boolean.FALSE;
        }
        createDockerCheckBox.setSelected(dockervalue);
        createDockerImageLabel.setVisible(value);

        String txt = (String) settings.getProperty(TemplateKeys.PKG_DOCKER_IMAGE_NAME);
        if (txt == null) {
            txt = forModule(VertxPanel.class).get(TemplateKeys.VERTX_DOCKER_DEFAULT_IMAGE_NAME, "");
        }
        dockerImageNameTextField.setText(txt);
        //dockerImageNameTextField.setEnabled(value && dockervalue);
        dockerImageNameTextField.setVisible(value && dockervalue);
        dockerImageNameLabel.setVisible(value && dockervalue);

    }

    /* (non-Javadoc)
     * @see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)
     */
    @Override
    public void removeUpdate(DocumentEvent e) {
        panel.fireChangeEvent();
        //updateTexts(e);
    }

    /**
     * Store the values created in this wizard.
     *
     * @param d the d
     */
    void store(WizardDescriptor d) {
        Boolean fatJarValue = createFatJarCheckBox.isSelected();
        Boolean dockerValue = createDockerCheckBox.isSelected();
        d.putProperty(TemplateKeys.PKG_CREATE_FAT_JAR, fatJarValue);
        d.putProperty(TemplateKeys.PKG_CREATE_DOCKER, dockerValue);
        d.putProperty(TemplateKeys.PKG_DOCKER_IMAGE_NAME, dockerImageNameTextField.getText());
    }

    /**
     * Checks if the entered values are valid.
     *
     * @param wizardDescriptor the wizard descriptor
     * @return true, if successful
     */
    boolean valid(WizardDescriptor wizardDescriptor) {

        if (dockerImageNameTextField.isVisible()) {
            String imageName = dockerImageNameTextField.getText();

            if (null == imageName || imageName.trim().length() == 0) {
                wizardDescriptor.putProperty("WizardPanel_errorMessage", "Docker image name is missing");
                return false;
            } else if (imageName.length() > 256) {
                wizardDescriptor.putProperty("WizardPanel_errorMessage", "Docker image name is too long");
                return false;
            } else if (!Validator.validateDockerImageName(imageName)) {
                wizardDescriptor.putProperty("WizardPanel_errorMessage", "Docker image name invalid");
                return false;
            }
        }
        wizardDescriptor.putProperty("WizardPanel_errorMessage", "");
        return true;
    }

    /**
     * Validate.
     *
     * @param d the d
     * @throws WizardValidationException the wizard validation exception
     */
    void validate(WizardDescriptor d) throws WizardValidationException {
        // nothing to validate
    }

    /* (non-Javadoc)
     * @see javax.swing.event.ChangeListener#stateChanged(javax.swing.event.ChangeEvent)
     */
    @Override
    public void stateChanged(ChangeEvent e) {
        panel.fireChangeEvent();
    }

}
