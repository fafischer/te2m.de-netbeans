package ${TargetPackage};

import io.vertx.core.AbstractVerticle;
import io.vertx.core.Future;
import io.vertx.core.http.HttpServerResponse;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.web.Router;
import io.vertx.ext.web.RoutingContext;
import io.vertx.ext.web.handler.BodyHandler;

/*
* ${TargetName}
*
* ${TargetDescription}
* created on ${CreationDate}
*
* @author ${CurrentUser} 
* @since ${Version}
*/
public class ${TargetName} extends AbstractVerticle {

    public static final String BASE_PATH = "api";

    public static final String PARAM_ID = "id";
   
    @Override    
    public void start(Future<Void> future) {
        // initialize Router
        Router router = Router.router(vertx);
        // register the handler
        router.route().handler(BodyHandler.create());
        router.get("/" + BASE_PATH + "/:" + PARAM_ID).handler(this::handleGet);
        router.put("/" + BASE_PATH + "/:" + PARAM_ID).handler(this::handleAdd);
        router.post("/" + BASE_PATH + "/:" + PARAM_ID).handler(this::handleReplace);
        router.delete("/" + BASE_PATH + "/:" + PARAM_ID).handler(this::handleDelete);
        router.patch("/" + BASE_PATH + "/:" + PARAM_ID).handler(this::handleUpdate);
        router.get("/" + BASE_PATH).handler(this::handleList);
        // create HTTP server
        vertx.createHttpServer().requestHandler(router::accept).listen(8080);
    }

    @Override
    public void stop() {
        // Optional - called when verticle is undeployed
        // @TODO Add cleanup as required
    }

    /**
     * Returns the entity for the provided ID
     */
    private void handleGet(RoutingContext routingContext) {
        String entityID = routingContext.request().getParam(PARAM_ID);
        HttpServerResponse response = routingContext.response();
        if (entityID == null) {
            sendError(400, response);
        } else {
            //@TODO Implement: Lookup entity identified with ID
            JsonObject json = null;
            if (json == null) {
                sendError(404, response);
            } else {
                response.putHeader("content-type", "application/json").end(json.encodePrettily());
            }
        }        
    }

    /**
     * Adds a new entity
     */
    private void handleAdd(RoutingContext routingContext) {
        String entityID = routingContext.request().getParam(PARAM_ID);
        HttpServerResponse response = routingContext.response();
        if (entityID == null) {
            sendError(400, response);
        } else {
            JsonObject json = routingContext.getBodyAsJson();
            if (json == null) {
                sendError(400, response);
            } else {
                //@TODO Implement: Add entity identified with ID as required by the business logic
                response.end();
            }
        }
    }
    
    /**
     * Replace the entity identified with the provided ID
     */
    private void handleReplace(RoutingContext routingContext) {
        String entityID = routingContext.request().getParam(PARAM_ID);
        HttpServerResponse response = routingContext.response();
        if (entityID == null) {
            sendError(400, response);
        } else {
            JsonObject json = routingContext.getBodyAsJson();
            if (json == null) {
                sendError(400, response);
            } else {
                //@TODO Implement: Replace entity identified with ID as required by the business logic
                response.end();
            }
        }
    }
    
    /**
     * Deletes the entity identified with the provided ID
     */
    private void handleDelete(RoutingContext routingContext) {
        String entityID = routingContext.request().getParam(PARAM_ID);
        HttpServerResponse response = routingContext.response();
        if (entityID == null) {
            sendError(400, response);
        } else {
            JsonObject json = routingContext.getBodyAsJson();
            if (json == null) {
                sendError(400, response);
            } else {
                //@TODO Implement: Delete entity identified with ID as required by the business logic
                response.end();
            }
        }
    }
    
    /**
     * Update the entity identified with the provided ID
     */
    private void handleUpdate(RoutingContext routingContext) {
        String entityID = routingContext.request().getParam(PARAM_ID);
        HttpServerResponse response = routingContext.response();
        if (entityID == null) {
            sendError(400, response);
        } else {
            JsonObject json = routingContext.getBodyAsJson();
            if (json == null) {
                sendError(400, response);
            } else {
                //@TODO Implement: Update entity identified with ID as required by the business logic
                response.end();
            }
        }
    }
    /**
     * Returns a list of all entities
     */
    private void handleList(RoutingContext routingContext) {
        JsonArray arr = new JsonArray();

        // @TODO Implement: Fill JSONArray with all entities as required
        routingContext.response().putHeader("content-type", "application/json").end(arr.encodePrettily());
    }

    /**
     * Sets the provided error code and finishes request processing
     */
    private void sendError(int statusCode, HttpServerResponse response) {
        response.setStatusCode(statusCode).end();
    }
}